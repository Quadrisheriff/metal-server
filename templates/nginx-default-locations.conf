# vim: set syntax=nginx:

#==============================================================================
# Copyright (C) 2019-present Alces Flight Ltd.
#
# This file is part of Metal Server.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# Metal Server is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with Flight Cloud. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on Metal Server, please visit:
# https://github.com/openflighthpc/metal-server
#===============================================================================

#
# This file has been rendered by OpenFlightHPC - Metal Server
# Any changes to this file maybe lost
#

location /api/ {
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header Host $http_host;

  proxy_pass http://api_server/;
}

location /api_authorize {
  internal;

  proxy_pass http://api_server/authorize/$api_authorize_ext;
}

#
# Reference code for getting nginx to handle upload. The `epel` version of nginx
# does not ship with `nginx_upload_module` so a custom compiled version is required
# This is being put on hold for now
#
# location /api_loaded {
#   internal;

#   proxy_pass http://api_server/uploaded;
# }

# location /upload/([^/]+/.*) {
#   set $api_authorize_ext upload/$1;
#   auth_request /api_authorize;

#   upload_pass /api_loaded;

#   # Set the upload store
#   <#%
#     # The required directories are created when the file is rendered
#     upload_dir = File.join(Figaro.env.temporary_directory, 'upload_store')
#     (0..9).each { |i| FileUtils.mkdir_p(File.join(upload_dir, i.to_s)) }
#   -%>
#   upload_store <#%= upload_dir %> 1;

#   return 400;
# }

location /download/ {
<% FileModel.inherited_classes.each do |klass| -%>
  location ~ ^/download/<%= klass.type %>/(<%= klass.perl_match_all_filename %>) {

    set $api_authorize_ext download/<%= klass.type %>/$1;
    auth_request /api_authorize;

    add_header Cache-Control no-cache;

    root <%= klass.base_path %>;

    try_files /$1 /$1/ =404;
  }

<% end -%>
  return 400;
}

